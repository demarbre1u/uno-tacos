{{> floating-logo}}
<div class="row justify-content-center" id="gamePlay">
    {{> starting-block}}
    <div class="col-8" id="roomTurn">
        <div class="row justify-content-start align-content-center" style="height:100px">
            <div class="col-3">
                <div class="w-100 spinner" style="display: none;">
                    {{> spinner}}
                </div>
            </div>
            <div class="col-3 flex-center">
                <p class="w-100"></p>
            </div>
        </div>
        <div id="uno" style="display: none;">
            <button id="uno-btn"
                    type="button"
                    disabled="disabled"
                    class="btn btn-success btn-lg"
                    onclick="screamUno()">UNO !</button>
            <button id="contre-uno-btn"
                    type="button"
                    disabled="disabled"
                    class="btn btn-warning btn-lg"
                    onclick="screamContreUno()">CONTRE UNO !</button>
        </div>
    </div>
    <div class="col-8" id="roomCardHeap"></div>
    {{> color-change}}
    <div class="col-3" id="roomCardDeck">
        <div class="uno-card shaking">
            <div class="row color-black">
                <div class="col-12 small"><div class="type"></div></div>
                <div class="col-12">
                    <div class="big type">
                        <img src="../../img/hat.png" class="smallImg" alt="Card deck"/>
                    </div>
                </div>
                <div class="col-12 small text-right"><div class="type"></div></div>
            </div>
        </div>


    </div>
    <div class="col-12" id="ownerCards"></div>
</div>

<script src="../socket.io/socket.io.js"></script>
<script>
    var CardColors = JSON.parse('{{{CardColors}}}');
    var CardTypes = JSON.parse('{{{CardTypes}}}');
    var RoomStates = JSON.parse('{{{RoomStates}}}');

    console.log({CardColors});
    console.log({CardTypes});
    console.log({RoomStates});

    var roomId = '{{roomId}}';
    var socket = io();
    var userId;

    var currentUser;

    $(document).ready(function() {
        // Lorsque le joueur clique sur le tas de carte, il demande au serveur de piocher
        $('#roomCardDeck').on('click', function(event) {
            socket.emit('drawCard', {userId, roomId});
        });

        $(".uno-card.user").mouseenter(() => {
            console.log('hello')
        });
    });

    socket.on('connected', function(uid) {
        userId = uid;
        socket.emit('joinRoom', roomId);
    }); 

    socket.on('roomFull', function(roomId) {
        $('#starting-block').hide();
        $('#roomFull').show();

        let base = new Date(), countDownDate = base.setSeconds(base.getSeconds() + 10);
        var x = setInterval(function() {

            // Get today's date and time
            var now = new Date().getTime();

            // Find the distance between now and the count down date
            var distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Display the result in the element with id="demo"
            document.getElementById("secondsLeft").innerHTML = seconds + "s ";

            // If the count down is finished, write some text
            if (distance < 0) {
                clearInterval(x);
                window.location.href = 'http://localhost:3000';
            }
        }, 1000);
    });

    socket.on('gameAlreadyOngoing', function(roomId) {
        console.log(roomId);

        // TODO: afficher un message au joueur indiquant qu'une partie est déjà en cours
    });

    socket.on('gameData', function(gameData) {
        var gameState = gameData.roomState;
        var gameOwner = gameData.roomOwner;

        console.log(gameData);

        switch(gameState) {
            case RoomStates.WAITING_FOR_PLAYERS: 
                $('#starting-block').show();
                $('#starting-block #players').html('');

                var startGameBtn = document.getElementById('start-game-btn');
                startGameBtn.style.display = 'hidden';

                break;
            case RoomStates.READY: 
                $('#starting-block').show();

                // Affiche le bouton "Start game" s'il y a assez de joueurs, et que l'utilisateur courrant est le propriétaire de la room
                if(gameOwner === userId) {
                    var startGameBtn = document.getElementById('start-game-btn');
                    startGameBtn.style.display = 'block';
                }

                $('#starting-block #players').html(gameData.roomPlayers.length + ' joueurs ont rejoint la room');

                break;
            case RoomStates.GAME_ONGOING:
                $('#starting-block').hide();

                currentUser = gameData.roomPlayers.find(u => u.uuid === userId);

                // Affiche les cartes de l'utilisateur courrant
                let html = '', leftIndex = 0, topIndex = 0, zIndex = 2;
                currentUser.cards.forEach((c, index) => {
                    if (index % 8 === 0) {
                        topIndex -= 100;
                        leftIndex = 0;
                        zIndex --;
                    }
                    html += getCardTemplate(c, 'user', index, leftIndex, topIndex, zIndex);
                    leftIndex += 140;
                });

                $('#ownerCards').html(html);
                $('#roomCardDeck').show();

                var isUserTurn = gameData.roomPlayerTurn.uuid === userId;
                // Si c'est le tour de l'utilisateur courant, les cartes peuvent être cliquées pour être jouées
                if(isUserTurn) {
                    $('#roomTurn p').text("C'est votre tour !");
                    $('.spinner').hide();
                    $('#ownerCards .uno-card').on('click', function(event) {
                        var cardId = $(this).data('id');
                        socket.emit('playCard', {
                            roomId: roomId,
                            playerId: userId, 
                            cardId: cardId, 
                        });
                    });

                    if (currentUser.cards.length === 1) {
                        $('#uno-btn').prop('disabled', false);
                    }
                }
                else {
                    $('#roomTurn p').text("C'est au tour de " + gameData.roomPlayerTurn.username);
                    $('.spinner').show();
                }

                let lastAddedCard = gameData.roomCardHeap.slice(-1)[0];
                $('#roomCardHeap').html(getCardTemplate(lastAddedCard, 'deck', 0, 0));

                if (gameData.roomPlayers.some(p => p.cards.length === 1))
                    $('#contre-uno-btn').prop('disabled', false);

                break;
        }

        $('#roomName').val('http://localhost:3000/game/' + gameData.roomName);
    });

    function startGame() {
        socket.emit('startGame', roomId);
        $('#start-game-btn').hide();
        $('#ownerCards').html('');
    }

    function copyRoomName() {
        var copyTextarea = document.querySelector('#roomName');
        copyTextarea.focus();
        copyTextarea.select();

        try {
            document.execCommand('copy');
            var tooltip = bootstrap.Tooltip.getOrCreateInstance($('#copyRoomName-btn'), {
                trigger: 'manual',
                title: 'Lien copié!',
                animation: true
            });
            tooltip.show();
            setTimeout(function () {tooltip.hide()}, 3000);
        } catch (err) {
            console.error(err)
            console.error('Oops, unable to copy');
        }
    }

    function chooseCard(event) {
        console.log(event)
        // todo: choose card from player cards and add it game deck
    }

    function pickUpCards() {
        // todo: pickup random card from deck and add it to player cards
    }

    function screamUno() {
        alert('UNO !');
        // todo: if opponent clicked on CONTRE UNO, then player picks up 7 cards
    }

    function screamContreUno() {
        alert('CONTRE UNO !');
        // todo: if opponent didn't click UNO, then opponent picks up 7 cards
    }

    function getCardTemplate(card, origin, index, leftIndex, topIndex = 0, zIndex = 0) {

        if(typeof card === 'undefined')
            return '';

        let colorClass = 'color-';
        switch (card.color) {
            case CardColors.COLOR_RED:
                colorClass += 'red'; break;
            case CardColors.COLOR_BLUE:
                colorClass += 'blue'; break;
            case CardColors.COLOR_GREEN:
                colorClass += 'green'; break;
            case CardColors.COLOR_YELLOW:
                colorClass += 'yellow'; break;
            case CardColors.COLOR_SPECIAL:
            default:
                colorClass += 'black'; break;
        }

        let bigCardType, smallCardType;
        switch (card.type) {
            case CardTypes.TYPE_REVERSE:
                smallCardType = '<img class="smallImg" src="../../img/card-types/reverse.png" alt=""/>';
                bigCardType = '<img class="bigImg" src="../../img/card-types/reverse.png" alt=""/>';
                break;
            case CardTypes.TYPE_SKIP:
                smallCardType = '<img class="smallImg" src="../../img/card-types/skip.png" alt=""/>';
                bigCardType = '<img class="bigImg" src="../../img/card-types/skip.png" alt=""/>';
                break;
            case CardTypes.TYPE_PLUS_2:
                smallCardType = '+2';
                bigCardType = '+2';
                break;
            case CardTypes.TYPE_PLUS_4:
                smallCardType = '+4';
                bigCardType = '+4';
                break;
            case CardTypes.TYPE_COLOR_CHANGE:
                smallCardType = '<img class="smallImg" src="../../img/card-types/color-change.png" alt=""/>';
                bigCardType = '<img class="bigImg" src="../../img/card-types/color-change.png" alt=""/>';
                break;
            default:
                bigCardType = card.type;
                smallCardType = card.type;
                break;
        }

        let cardClass = '';
        if (origin === 'deck') {
            leftIndex = '25%';
        } else {
            cardClass = origin;
            leftIndex += 'px';
        }

        return '<div class="uno-card '+ cardClass + '" ' +
                    'data-id="' + index + '" data-origin="'+ origin + '" ' +
                    'style="left: '+ leftIndex +';top: ' + topIndex +'px;z-index:' + zIndex + ';">' +
                '<div class="row ' + colorClass + '">' +
                '<div class="col-12 small"><div class="type">' + smallCardType + '</div></div> ' +
                '<div class="col-12"><div class="big type"> ' + bigCardType + '</div></div> ' +
                '<div class="col-12 small text-right"><div class="type">' + smallCardType + '</div></div> ' +
                '</div>' +
                '</div>';
    }

</script>
