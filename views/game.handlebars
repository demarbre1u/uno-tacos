<div class="row justify-content-center" id="gamePlay">
    <div class="col-12 text-center p-5">
        <h2 id="roomName"></h2>
        <button id="start-game-btn"
                type="button"
                class="btn btn-success btn-lg"
                style="display: none" onclick="startGame()">Start game</button>
        <div id="players"></div>
    </div>
    <div class="col-8" id="gameDeck"></div>
    <div class="col-4" id="roomCardDeck">
        <div class="uno-card shaking">
            <div class="row color-black">
                <div class="col-12 small"><div class="type"></div></div>
                <div class="col-12">
                    <div class="big type">
                        <img src="../../img/hat.png" class="smallImg" alt="Card deck"/>
                    </div>
                </div>
                <div class="col-12 small text-right"><div class="type"></div></div>
            </div>
        </div>
    </div>
    <div class="col-12" id="ownerCards"></div>
    <div class="col-12" id="uno">
        <button id="start-game-btn"
                type="button"
                class="btn btn-success btn-lg"
                style="display: none" onclick="screamUno()">UNO !</button>
    </div>
    <div class="col-12" id="contre-uno">
        <button id="start-game-btn"
                type="button"
                class="btn btn-success btn-lg"
                style="display: none" onclick="screamContreUno()">CONTRE UNO !</button>
    </div>
</div>

<script src="../socket.io/socket.io.js"></script>
<script>
    var CardColors = JSON.parse('{{{CardColors}}}');
    var CardTypes = JSON.parse('{{{CardTypes}}}');
    var RoomStates = JSON.parse('{{{RoomStates}}}');

    console.log({CardColors});
    console.log({CardTypes});
    console.log({RoomStates});

    var roomId = '{{roomId}}';
    var socket = io();
    var userId;

    var currentUser;

    socket.on('connected', function(uid) {
        userId = uid;
        socket.emit('joinRoom', roomId);
    }); 

    socket.on('gameData', function(gameData) {
        var gameState = gameData.roomState;
        var gameOwner = gameData.roomOwner;

        console.log(gameData);

        if(gameState === 1 && gameOwner === userId) {
            var startGameBtn = document.getElementById('start-game-btn');
            startGameBtn.style.display = 'block';
        }

        currentUser = gameData.roomPlayers.find(u => u.uuid === userId);

        var html = '';
        var leftIndex = 0;
        currentUser.cards.forEach((c, index) => {
            html += getCardTemplate(c, index, leftIndex);
            leftIndex += 140;
        });

        $('#ownerCards').html(html);
        $('#roomName').text(gameData.roomName);
        $('#roomCardDeck').show();
    });

    function startGame() {
        socket.emit('startGame', roomId);
        $('#start-game-btn').hide();
        $('#ownerCards').empty();
    }

    function chooseCard() {
        // todo: choose card from player cards and add it game deck
    }

    function pickUpCards() {
        // todo: pickup random card from deck and add it to player cards
    }

    function screamUno() {
        alert('UNO !');
    }

    function screamContreUno() {
        alert('CONTRE UNO !');
    }

    function getCardTemplate(card, index, leftIndex) {
        let colorClass = 'color-';
        switch (card.color) {
            case CardColors.COLOR_RED:
                colorClass += 'red'; break;
            case CardColors.COLOR_BLUE:
                colorClass += 'blue'; break;
            case CardColors.COLOR_GREEN:
                colorClass += 'green'; break;
            case CardColors.COLOR_YELLOW:
                colorClass += 'yellow'; break;
            case CardColors.COLOR_SPECIAL:
            default:
                colorClass += 'black'; break;
        }

        let bigCardType = '';
        let smallCardType = '';
        switch (card.type) {
            case CardTypes.TYPE_REVERSE:
                smallCardType = '<img class="smallImg" src="../../img/card-types/reverse.png" alt=""/>';
                bigCardType = '<img class="bigImg" src="../../img/card-types/reverse.png" alt=""/>';
                break;
            case CardTypes.TYPE_SKIP:
                smallCardType = '<img class="smallImg" src="../../img/card-types/skip.png" alt=""/>';
                bigCardType = '<img class="bigImg" src="../../img/card-types/skip.png" alt=""/>';
                break;
            case CardTypes.TYPE_PLUS_2:
                smallCardType = '+2';
                bigCardType = '+2';
                break;
            case CardTypes.TYPE_PLUS_4:
                smallCardType = '+4';
                bigCardType = '+4';
                break;
            case CardTypes.TYPE_COLOR_CHANGE:
                smallCardType = '<img class="smallImg" src="../../img/card-types/color-change.png" alt=""/>';
                bigCardType = '<img class="bigImg" src="../../img/card-types/color-change.png alt=""/>';
                break;
            default:
                bigCardType = card.type;
                smallCardType = card.type;
                break;
        }

        return '<div class="uno-card elevate" style="left: '+ leftIndex +'px">' +
                '<div class="row ' + colorClass + '">' +
                '<div class="col-12 small"><div class="type">' + smallCardType + '</div></div> ' +
                '<div class="col-12"><div class="big type"> ' + bigCardType + '</div></div> ' +
                '<div class="col-12 small text-right"><div class="type">' + smallCardType + '</div></div> ' +
                '</div>' +
                '</div>';
    }

</script>
