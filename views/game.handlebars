{{> floating-logo}}
<div class="row justify-content-center">
    {{> starting-block}}
</div>
<div class="row justify-content-center" id="gamePlay">
    {{> color-change}}
    <div class="col-8" id="roomCardHeap"></div>
    <div class="col-4" id="rightSidebar">
        <div class="row justify-content-start align-content-center position-relative" style="height:200px" id="roomTurn">
            <div class="col-12 table-responsive">
                <table id="otherPlayers"
                       class="table table-bordered table-sm
                       table-striped table-hover table-light caption-top align-middle">
                    <caption class="small"></caption>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        {{> card-deck}}
    </div>
    <div class="col-12" id="ownerCards"></div>
    {{> uno}}
</div>

<script src="../socket.io/socket.io.js"></script>
<script>
    var
            CardColors = JSON.parse('{{{CardColors}}}'),
            CardTypes = JSON.parse('{{{CardTypes}}}'),
            RoomStates = JSON.parse('{{{RoomStates}}}'),
            roomId = '{{roomId}}',
            socket = io(),
            userId,
            currentUser,
            WindowHost = window.location.origin
    ;

    $(document).ready(function() {
        // Lorsque le joueur clique sur le tas de carte, il demande au serveur de piocher
        $('#roomCardDeck .uno-card').on('click', function(event) {
            socket.emit('drawCard', {userId, roomId});
        });

        $(".floating-logo img").mouseenter(function () {
            $('.custom-tooltip').fadeIn();
        }).mouseleave(function () {
            $('.custom-tooltip').fadeOut();
        });
    });

    socket.on('connected', function(uid) {
        userId = uid;
        socket.emit('joinRoom', roomId);
    }); 

    socket.on('roomFull', function(roomId) {
        redirectUser('full');
    });

    socket.on('gameAlreadyOngoing', function(roomId) {
        redirectUser('ongoing');
    });

    socket.on('gameData', function(gameData) {
        var gameState = gameData.roomState,
                gameOwner = gameData.roomOwner,
                startGameBtn = document.getElementById('start-game-btn');

        switch(gameState) {
            case RoomStates.WAITING_FOR_PLAYERS: 
                $('#gameOver').hide();
                $('#starting-block').show();
                $('#starting-block #players').html('');
                $('#ownerCards').html('');
                $('#gamePlay').hide();

                startGameBtn.style.display = 'hidden';

                break;
            case RoomStates.READY: 
                $('#starting-block').show();
                $('#ownerCards').html('');
                $('#gamePlay').hide();
                $('#gameOver').hide();

                // Affiche le bouton "Start game" s'il y a assez de joueurs, et que l'utilisateur courrant est le propriétaire de la room
                if(gameOwner === userId) {
                    startGameBtn.style.display = 'block';
                }

                $('#starting-block #players').html(gameData.roomPlayers.length + ' joueurs ont rejoint la room');

                break;
            case RoomStates.GAME_ONGOING:
                $('#gamePlay').show();
                $('#starting-block').hide();
                $('#uno').show();
                $('#gameOver').hide();

                fillPlayersTable(gameData.roomPlayers, gameData.roomPlayerTurn);
                $('#otherPlayers caption').text(gameData.roomPlayers.length + ' joueurs');

               currentUser = gameData.roomPlayers.find(u => u.uuid === userId);
               // Affiche les cartes de l'utilisateur courrant
                let html = '', leftIndex = 0, topIndex = 0, zIndex = 5;
                currentUser.cards.forEach((c, index) => {
                    let modulo = index % 7;
                    if (modulo === 0 && index > 0) {
                        topIndex -= 100;
                        leftIndex = 0;
                        zIndex --;
                    }
                    html += getCardTemplate(c, 'user', index, leftIndex, topIndex, zIndex);
                    leftIndex += 140;
                });

                $('#ownerCards').html(html);
                $('#roomCardDeck').show();

                var isUserTurn = gameData.roomPlayerTurn.uuid === userId;
                // Si c'est le tour de l'utilisateur courant, les cartes peuvent être cliquées pour être jouées
                if(isUserTurn) {
                    let cardId;
                    $('#ownerCards .uno-card').off('click');
                    $('#ownerCards .uno-card').on('click', function(event) {
                        event.stopPropagation();

                        cardId = $(this).data('id');

                        if (currentUser.cards[cardId].type === CardTypes.TYPE_COLOR_CHANGE) {
                            $('#template-color-change').fadeIn();

                            $('#closeColorChange-btn').on('click', function(event) {
                                $('#template-color-change').fadeOut();
                            });
                        } else {
                            socket.emit('playCard', {
                                roomId: roomId,
                                playerId: userId,
                                cardId: cardId,
                            });
                        }

                        return false;
                    });

                    $(document).off('click', '#color-change-block .clickable');
                    $(document).on('click', '#color-change-block .clickable', function (event) {
                        event.stopPropagation();
                        let color;
                        switch ($(this).data('color')) {
                            case "red": color = CardColors.COLOR_RED; break;
                            case "blue": color = CardColors.COLOR_BLUE; break;
                            case "green": color = CardColors.COLOR_GREEN; break;
                            case "yellow": color = CardColors.COLOR_YELLOW; break;
                            default: break;
                        }
                        socket.emit('playCard', {
                            roomId: roomId,
                            playerId: userId,
                            cardId: cardId,
                            color: color
                        });
                        $('#template-color-change').fadeOut();

                        return false;
                    });
                }

                let lastAddedCard = gameData.roomCardHeap.slice(-1)[0];
                $('#roomCardHeap').html(getCardTemplate(lastAddedCard, 'deck', 0, 0));

                $('#contre-uno-btn').prop('disabled', gameData.roomUno === null || gameData.roomUno === userId);
                $('#uno-btn').prop('disabled', currentUser.cards.length !== 1);

                if ($('#contre-uno-btn').prop('disabled') === false) {
                    let width = $('#contre-uno-btn').width(),
                            height = $('#contre-uno-btn').height();
                    $('#contre-uno-btn').css({
                        top: (Math.floor(Math.random() * 101) - (100 * height / window.innerHeight)) + 'vh',
                        left: (Math.floor(Math.random() * 101) - (100 * width / window.innerWidth)) + 'vw',
                        'z-index': 999
                    });
                    $('#contre-uno-btn').show();
                } else {
                    $('#contre-uno-btn').hide();
                }

                if ($('#uno-btn').prop('disabled') === false) {
                    let width = $('#uno-btn').width(),
                    height = $('#uno-btn').height();
                    $('#uno-btn').css({
                        top: (Math.floor(Math.random() * 101) - (100 * height / window.innerHeight)) + 'vh',
                        left: (Math.floor(Math.random() * 101) - (100 * width / window.innerWidth)) + 'vw',
                        'z-index': 999
                    });
                    $('#uno-btn').show();
                } else {
                    $('#uno-btn').hide();
                }

                break;

                case RoomStates.GAME_OVER:
                    let gameOverDiv = $('#gameOver');

                    table = '';

                    gameData.roomPlayers.sort((a, b) => {
                        return a.place - b.place;
                    });

                    fillPlayersTable(gameData.roomPlayers, gameData.roomPlayerTurn, true);
                    $('#otherPlayers caption').hide();

                    let players = $('#roomTurn .table-responsive').html();
                    gameOverDiv.append(players);
                    $('#gamePlay').hide();
                    gameOverDiv.show();
                    break;
        }

        $('#roomName').val(WindowHost + '/game/' + gameData.roomName);
    });

    function redirectUser(type) {
        $('#starting-block').hide();
        $('#roomFull').show();
        $("#roomFull #type").text(type === 'ongoing' ? 'a déjà commencé' : 'est déjà complète (max 4 joueurs)');

        let base = new Date(), countDownDate = base.setSeconds(base.getSeconds() + 10);
        var x = setInterval(function() {

            // Get today's date and time
            var now = new Date().getTime();

            // Find the distance between now and the count down date
            var distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Display the result in the element with id="demo"
            $("#secondsLeft").text(seconds + "s ");
            // If the count down is finished, write some text
            if (distance < 1) {
                clearInterval(x);
                window.location.href = WindowHost;
            }
        }, 1000);
    }

    function startGame() {
        socket.emit('startGame', roomId);
        $('#start-game-btn').hide();
        $('#ownerCards').html('');
    }

    function copyRoomName() {
        var copyTextarea = document.querySelector('#roomName');
        copyTextarea.focus();
        copyTextarea.select();

        try {
            document.execCommand('copy');
            var tooltip = bootstrap.Tooltip.getOrCreateInstance($('#copyRoomName-btn'), {
                trigger: 'manual',
                title: 'Lien copié!',
                animation: true
            });
            tooltip.show();
            setTimeout(function () {tooltip.hide()}, 3000);
        } catch (err) {
            console.error(err)
            console.error('Oops, unable to copy');
        }
    }

    function screamUno() {
        socket.emit('uno', {userId, roomId});
    }

    function screamContreUno() {
        socket.emit('uno', {userId, roomId});
    }

    function fillPlayersTable(players, roomPlayerTurn, showRanking = false) {
        let table = '';
        players.forEach(u => {
            table += getPlayerTurnTemplate(u, roomPlayerTurn.uuid === u.uuid, showRanking);
        });
        $('#otherPlayers tbody').html(table);
    }

    function getPlayerTurnTemplate(user, theirTurn = false, showRanking = false) {
        let isItMe = user.uuid === userId,
        firstCol = '<td class="text-center first-col" style="height: 50px !important;">';

        if (showRanking) {
            firstCol += '<p class="flex-center game-over">' + user.place + '</p>';
        } else if (theirTurn) {
            firstCol += '<img src="../../img/hat.png" class="img-fluid" style="width:auto;height:50px;" alt="YourTurn"/>';
        }
        firstCol += '</td>';

        let cardsNumberCol = showRanking ? '' : '<td class="text-center cards-number" style="height: 45px !important;padding: 4%;">' +
                '<img src="../../img/cards.png" alt="Cards" class="img-fluid me-2" style="width: 35px;"/>' +
                user.cards.length +'</td>';

        return  '<tr style="height: 50px !important;"' + (showRanking && user.place === 1 ? ' class="winner" ': '') + '>' +
                firstCol +
                '<td class="text-center ' + (isItMe ? 'fw-bold' : '') + '" style="height: 45px !important;padding: 4%;">' + user.username +'</td>' +
                cardsNumberCol +
                '</tr>';
    }

    function getCardTemplate(card, origin, index, leftIndex, topIndex = 0, zIndex = 0) {

        if(typeof card === 'undefined')
            return '';

        let colorClass = 'color-';
        switch (card.color) {
            case CardColors.COLOR_RED:
                colorClass += 'red'; break;
            case CardColors.COLOR_BLUE:
                colorClass += 'blue'; break;
            case CardColors.COLOR_GREEN:
                colorClass += 'green'; break;
            case CardColors.COLOR_YELLOW:
                colorClass += 'yellow'; break;
            case CardColors.COLOR_SPECIAL:
            default:
                colorClass += 'black'; break;
        }

        let bigCardType, smallCardType;
        switch (card.type) {
            case CardTypes.TYPE_REVERSE:
                smallCardType = '<img class="smallImg" src="../../img/card-types/reverse.png" alt=""/>';
                bigCardType = '<img class="bigImg" src="../../img/card-types/reverse.png" alt=""/>';
                break;
            case CardTypes.TYPE_SKIP:
                smallCardType = '<img class="smallImg" src="../../img/card-types/skip.png" alt=""/>';
                bigCardType = '<img class="bigImg" src="../../img/card-types/skip.png" alt=""/>';
                break;
            case CardTypes.TYPE_PLUS_2:
                smallCardType = '+2';
                bigCardType = '+2';
                break;
            case CardTypes.TYPE_PLUS_4:
                smallCardType = '+4';
                bigCardType = '+4';
                break;
            case CardTypes.TYPE_COLOR_CHANGE:
                smallCardType = '<div class="col-6 col-sm-3 col-md-2 col-lg-1 clickable" data-color="blue">' +
                        '<div class="ellipse on-card-small top-left color-blue"></div></div> ' +
                        '<div class="col-6 col-sm-3 col-md-2 col-lg-1 clickable" data-color="red">' +
                        '<div class="ellipse on-card-small top-right color-red"></div></div>' +
                        '<div class="w-100"></div>' +
                        '<div class="col-6 col-sm-3 col-md-2 col-lg-1 clickable" data-color="yellow">' +
                        '<div class="ellipse on-card-small bottom-left color-yellow"></div></div>' +
                        '<div class="col-6 col-sm-3 col-md-2 col-lg-1 clickable" data-color="green">' +
                        '<div class="ellipse on-card-small bottom-right color-green"></div></div>';
                bigCardType = '<div class="col-6 col-sm-3 col-md-2 col-lg-4 clickable" data-color="blue">' +
                        '<div class="ellipse on-card-big top-left color-blue"></div></div> ' +
                        '<div class="col-6 col-sm-3 col-md-2 col-lg-4 clickable" data-color="red">' +
                        '<div class="ellipse on-card-big top-right color-red"></div></div>' +
                        '<div class="w-100"></div>' +
                        '<div class="col-6 col-sm-3 col-md-2 col-lg-4 clickable" data-color="yellow">' +
                        '<div class="ellipse on-card-big bottom-left color-yellow"></div></div>' +
                        '<div class="col-6 col-sm-3 col-md-2 col-lg-4 clickable" data-color="green">' +
                        '<div class="ellipse on-card-big bottom-right color-green"></div></div>';
                break;
            default:
                bigCardType = card.type;
                smallCardType = card.type;
                break;
        }

        let cardClass = '';
        if (origin === 'deck') {
            leftIndex = '25%';
        } else {
            cardClass = origin + ' elevate';
            leftIndex += 'px';
        }

        return '<div class="uno-card '+ cardClass + '" ' +
                    'data-id="' + index + '" ' +
                    'data-special="' + card.type + '"' +
                    'data-origin="'+ origin + '" ' +
                    'style="left: '+ leftIndex +';top: ' + topIndex +'px;z-index:' + zIndex + ';">' +
                '<div class="row ' + colorClass + '">' +
                '<div class="col-12 small"><div class="type firstChild">' + smallCardType + '</div></div> ' +
                '<div class="col-12"><div class="big type"> ' + bigCardType + '</div></div> ' +
                '<div class="col-12 small text-right"><div class="type lastChild">' + smallCardType + '</div></div> ' +
                '</div>' +
                '</div>';
    }

</script>
